쓰레드 (Thread)
프로그램 명령문의 실행 흐름을 한 가닥의 실이란 뜻의 ' 쓰레드 ' 라고 한다.
특정 프로그램은 둘 이상의 실행 흐름을 갖도록 만들어야 하는데, 그러한 프로그램을 ' 멀티스레드 프로그램 ' 이라고 한다.
' 멀티스레드 프로그램 '은 메인스레드가 끝났다고 해서 프로그램이 끝나는게 아니라 프로그램으 구성하는 모든 스레드가 끝이 나야만 끝이 난다.

스레드를 이용하는 2가지 방법
1. Thread 클래스 이용

    멀티스레드로 사용할 클래스는 Thread 를 상속받는다.
    행해야 할 일련의 일들을 run 메소드안에 담아둔다 (일반적으로)
    메인메소드 안에서 해당 클래스를 생성해 run 메소드를 이용해 스레드를 실행시킨다.

    생성시 Thread(혹은 CLASSNAME) thread = new CLASSNAME();

    !!!! 궁금증
    - run() 과 start() 의 차이점
     : start() 를 사용하는 순간 해당 쓰레드만의 독립적인 작업공간인 호출스택이 생성된다. 호출 스택에 있는 내용을 모두 수행하고 나면 쓰레드는 호출스택 공간과
       함께 메모리상에서 소멸된다.
     : run() 은 단순히 클래스에 오버라이딩 된 메소드를 호출해서 사용하는 것으로 생각하면 된다.

     --> start() 메소드가 사용되면, 쓰레드가 실행할 준비를 하게하는 메소드고 쓰레드의 실행준비가 완료되면 run()메소드를 호출한다
     따라서, 쓰레드를 동작시킬때는 start()를 사용해야한다.


2. Runnable 인터페이스 이용

    멀티스레드로 활용할 클래스는 Runnable interface 를 implements 한다.
    run() 메소드를 오버라이딩 해서 사용한다.

    생성시 Thread(혹은 CLASSNAME) thread = new Thread(new CLASSNAME());

------------------------------------------------------------------------------------------

Thread 간의 Communication

쓰레드간 공동으로 접근 가능한 메모리 영역을 만들고, 데이터를 공유한다 .
데이터 교환에 사용되는 공유 영역은 레퍼런스 타입으로 만들어야 한다.


